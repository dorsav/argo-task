# This workflow will build and push a new image to AWS ECR 
# Then, it will create a new chart with configuration overrides for a remote argo-cd Helm chart
# Gather the remote chart and install it with helm on an EKS cluster that was created in advance, with the newly built docker image of course. a


name: Deploy ArgoCD to Amazon EKS with Helm

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                 
  ECR_REPOSITORY: public.ecr.aws/d5d3k9y4/argo-artlist           

jobs:
  deploy:
    name: Deploy Argo
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
          registry-type: public

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: 4.2
      run: |
        # Builds a docker image and pushes it to ECR
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"  
        
    - name: Deploy argo-cd with helm to EKS
      uses: wahyd4/kubectl-helm-action@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: |
          helm repo add argo-cd https://argoproj.github.io/argo-helm
          helm dep update charts/argo-cd/
          helm install argo-cd charts/argo-cd/
